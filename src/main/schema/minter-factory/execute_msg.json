{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Handle messages",
  "oneOf": [
    {
      "description": "CreateMinter will instantiate a new minter contract",
      "type": "object",
      "required": [
        "create_minter"
      ],
      "properties": {
        "create_minter": {
          "type": "object",
          "required": [
            "entropy",
            "product_template"
          ],
          "properties": {
            "entropy": {
              "description": "String used as entropy by the minter",
              "type": "string"
            },
            "product_template" : {
              "description": "template of product managed by the minter",
              "allOf": [
                {
                  "$ref": "#/definitions/ProductInfo"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "DeactivateMinter tells the minter_factory that the minter is inactive.",
      "type": "object",
      "required": [
        "deactivate_minter"
      ],
      "properties": {
        "deactivate_minter": {
          "type": "object",
          "required": [
            "owner"
          ],
          "properties": {
            "owner": {
              "description": "minter's owner",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the admin to add a new minter contract version",
      "type": "object",
      "required": [
        "new_minter_contract"
      ],
      "properties": {
        "new_minter_contract": {
          "type": "object",
          "required": [
            "minter_code_info"
          ],
          "properties": {
            "minter_code_info": {
              "$ref": "#/definitions/CodeInfo"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the admin to add a new collection contract version",
      "type": "object",
      "required": [
        "new_collection_contract"
      ],
      "properties": {
        "new_collection_contract": {
          "type": "object",
          "required": [
            "collection_code_info"
          ],
          "properties": {
            "collection_code_info": {
              "$ref": "#/definitions/CodeInfo"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Create a viewing key to be used with all minter_factory and minter authenticated queries",
      "type": "object",
      "required": [
        "create_viewing_key"
      ],
      "properties": {
        "create_viewing_key": {
          "type": "object",
          "required": [
            "entropy"
          ],
          "properties": {
            "entropy": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set a viewing key to be used with all minter_factory and minter authenticated queries",
      "type": "object",
      "required": [
        "set_viewing_key"
      ],
      "properties": {
        "set_viewing_key": {
          "type": "object",
          "required": [
            "key"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "padding": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows an admin to start/stop all minter creation",
      "type": "object",
      "required": [
        "set_status"
      ],
      "properties": {
        "set_status": {
          "type": "object",
          "required": [
            "stop"
          ],
          "properties": {
            "stop": {
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "disallow the use of a permit",
      "type": "object",
      "required": [
        "revoke_permit"
      ],
      "properties": {
        "revoke_permit": {
          "type": "object",
          "required": [
            "permit_name"
          ],
          "properties": {
            "padding": {
              "description": "optional message length padding",
              "type": [
                "string",
                "null"
              ]
            },
            "permit_name": {
              "description": "name of the permit that is no longer valid",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {

    "ProductInfo": {
      "description": "Contains information about the product whose licenses are managed by the minter",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "image": {
          "description": "product image url",
          "type": "string"
        },
        "name": {
          "description": "product's name",
          "type": "string"
        },
        "url": {
          "description": "link to the webpage describing the product",
          "type": "string"
        },
        "description": {
          "description": "Product description provided by the vendor",
          "type": "string"
        }
      }
    },
    "LicenseTypeInfo": {
      "description": "Contains information on a Product's license type provided by the vendor",
      "type": "object",
      "required": [
        "symbol",
        "name",
        "duration"

      ],
      "properties": {
        "symbol": {
          "description": "Symbol of the license. Must be an alphanumeric string between 3 and 16 characters",
          "type": "string",
          "minLength": 3,
          "maxLength": 15,
          "pattern": "^[A-Z0-9]{3,15}$"
        },
        "name": {
          "description": "License type name",
          "type": "string"
        },
        "description": {
          "description": "License Type textual description provided by the vendor",
          "type": "string"
        },
        "image": {
          "description": "License type Image url",
          "type": "string"
        },
        "duration": {
          "description": "License type duration in days",
          "type": "integer",
          "format": "uint64",
          "minimum": 0
        },
        "price": {
          "description": "Array of (fixed) prices in various denominations accepted by the vendor",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "amount",
              "denom"
            ],
            "properties": {
              "amount": {
                "description": "",
                "type": "integer",
                "format": "uint128",
                "minimum": 0
              },
              "denom": {
                "description": "",
                "type": "string"
              }
            }
          }
        }

      }
    },
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "CodeInfo": {
      "description": "Info needed to instantiate a contract",
      "type": "object",
      "required": [
        "code_id",
        "code_hash"
      ],
      "properties": {
        "code_id": {
          "description": "code id of the stored contract",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "code_hash": {
          "description": "code hash of the stored contract",
          "type": "string"
        }
      }
    }
  }
}
