{
    "openapi": "3.0.0",
    "info": {
        "title": "Keych API",
        "version": "1.0.0"
    },
    "paths": {
        "/execute-message": {
            "post": {
                "summary": "Execute a message",
                "description": "Accepts different types of messages based on the provided schema",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "owner": {
                                        "description": "owner of the Minter contract. Will be the product owner and Admin",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/Addr"
                                            }
                                        ]
                                    },
                                    "entropy": {
                                        "description": "entropy provided by the user- wil be used as entropy for the generated collections",
                                        "type": "string"
                                    },
                                    "collection_code_info": {
                                        "description": "collection code info",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/CodeInfo"
                                            }
                                        ]
                                    },
                                    "product_template": {
                                        "description": "template of product managed by the minter",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/ProductInfo"
                                            }
                                        ]
                                    }
                                },
                                "required": [
                                    "collection_code_info",
                                    "product_template"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Message processed successfully"
                    },
                    "default": {
                        "description": "An error occurred"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "CodeInfo": {
                "description": "Info needed to instantiate a collection",
                "type": "object",
                "required": [
                    "code_hash",
                    "code_id"
                ],
                "properties": {
                    "code_hash": {
                        "description": "code hash of the stored collection contract",
                        "type": "string"
                    },
                    "code_id": {
                        "description": "code id of the stored collection contract",
                        "type": "integer",
                        "format": "uint64",
                        "minimum": 0.0
                    }
                }
            },
            "ProductInfo": {
                "description": "Contains information about the product whose licenses are managed by the minter",
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "image": {
                        "description": "product image url",
                        "type": "string"
                    },
                    "name": {
                        "description": "product's name",
                        "type": "string"
                    },
                    "url": {
                        "description": "link to the webpage describing the product",
                        "type": "string"
                    },
                    "description": {
                        "description": "Product description provided by the vendor",
                        "type": "string"
                    }
                }
            },
            "LicenseTypeInfo": {
                "description": "Contains information on a Product's license type provided by the vendor",
                "type": "object",
                "required": [
                    "symbol",
                    "name",
                    "duration"
                ],
                "properties": {
                    "symbol": {
                        "description": "Symbol of the license. Must be an alphanumeric string between 3 and 16 characters",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 15,
                        "pattern": "^[A-Z0-9]{3,15}$"
                    },
                    "name": {
                        "description": "License type name",
                        "type": "string"
                    },
                    "description": {
                        "description": "License Type textual description provided by the vendor",
                        "type": "string"
                    },
                    "image": {
                        "description": "License type Image url",
                        "type": "string"
                    },
                    "duration": {
                        "description": "License type duration in days",
                        "type": "integer",
                        "format": "uint64",
                        "minimum": 0
                    },
                    "price": {
                        "description": "Array of (fixed) prices in various denominations accepted by the vendor",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": [
                                "amount",
                                "denom"
                            ],
                            "properties": {
                                "amount": {
                                    "description": "",
                                    "type": "integer",
                                    "format": "uint128",
                                    "minimum": 0
                                },
                                "denom": {
                                    "description": "",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "Addr": {
                "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
                "type": "string"
            }
        }
    }
}