/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coin from './Coin';

/**
 * The PostInstantiateCallback model module.
 * @module model/PostInstantiateCallback
 * @version 1.0.0
 */
class PostInstantiateCallback {
    /**
     * Constructs a new <code>PostInstantiateCallback</code>.
     * info needed to perform a callback message after instantiation
     * @alias module:model/PostInstantiateCallback
     * @param codeHash {String} code hash of the contract to execute
     * @param contractAddress {String} address of the contract to execute
     * @param msg {String} Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.  This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
     * @param send {Array.<module:model/Coin>} list of native Coin to send with the callback message
     */
    constructor(codeHash, contractAddress, msg, send) { 
        
        PostInstantiateCallback.initialize(this, codeHash, contractAddress, msg, send);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, codeHash, contractAddress, msg, send) { 
        obj['code_hash'] = codeHash;
        obj['contract_address'] = contractAddress;
        obj['msg'] = msg;
        obj['send'] = send;
    }

    /**
     * Constructs a <code>PostInstantiateCallback</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostInstantiateCallback} obj Optional instance to populate.
     * @return {module:model/PostInstantiateCallback} The populated <code>PostInstantiateCallback</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostInstantiateCallback();

            if (data.hasOwnProperty('code_hash')) {
                obj['code_hash'] = ApiClient.convertToType(data['code_hash'], 'String');
            }
            if (data.hasOwnProperty('contract_address')) {
                obj['contract_address'] = ApiClient.convertToType(data['contract_address'], 'String');
            }
            if (data.hasOwnProperty('msg')) {
                obj['msg'] = ApiClient.convertToType(data['msg'], 'String');
            }
            if (data.hasOwnProperty('send')) {
                obj['send'] = ApiClient.convertToType(data['send'], [Coin]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostInstantiateCallback</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostInstantiateCallback</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostInstantiateCallback.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code_hash'] && !(typeof data['code_hash'] === 'string' || data['code_hash'] instanceof String)) {
            throw new Error("Expected the field `code_hash` to be a primitive type in the JSON string but got " + data['code_hash']);
        }
        // ensure the json data is a string
        if (data['contract_address'] && !(typeof data['contract_address'] === 'string' || data['contract_address'] instanceof String)) {
            throw new Error("Expected the field `contract_address` to be a primitive type in the JSON string but got " + data['contract_address']);
        }
        // ensure the json data is a string
        if (data['msg'] && !(typeof data['msg'] === 'string' || data['msg'] instanceof String)) {
            throw new Error("Expected the field `msg` to be a primitive type in the JSON string but got " + data['msg']);
        }
        if (data['send']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['send'])) {
                throw new Error("Expected the field `send` to be an array in the JSON data but got " + data['send']);
            }
            // validate the optional field `send` (array)
            for (const item of data['send']) {
                Coin.validateJSON(item);
            };
        }

        return true;
    }


}

PostInstantiateCallback.RequiredProperties = ["code_hash", "contract_address", "msg", "send"];

/**
 * code hash of the contract to execute
 * @member {String} code_hash
 */
PostInstantiateCallback.prototype['code_hash'] = undefined;

/**
 * address of the contract to execute
 * @member {String} contract_address
 */
PostInstantiateCallback.prototype['contract_address'] = undefined;

/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.  This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 * @member {String} msg
 */
PostInstantiateCallback.prototype['msg'] = undefined;

/**
 * list of native Coin to send with the callback message
 * @member {Array.<module:model/Coin>} send
 */
PostInstantiateCallback.prototype['send'] = undefined;






export default PostInstantiateCallback;

