/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstantiateConfig from './InstantiateConfig';
import PostInstantiateCallback from './PostInstantiateCallback';
import RoyaltyInfo from './RoyaltyInfo';

/**
 * The ExecuteMessagePostRequest model module.
 * @module model/ExecuteMessagePostRequest
 * @version 1.0.0
 */
class ExecuteMessagePostRequest {
    /**
     * Constructs a new <code>ExecuteMessagePostRequest</code>.
     * @alias module:model/ExecuteMessagePostRequest
     * @param name {String} name of token contract
     * @param symbol {String} token contract symbol
     * @param minterPub {String} minter elliptic public key. Used for key exchange minter<-->collection
     * @param entropy {String} entropy used for prng seed
     */
    constructor(name, symbol, minterPub, entropy) { 
        
        ExecuteMessagePostRequest.initialize(this, name, symbol, minterPub, entropy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, symbol, minterPub, entropy) { 
        obj['name'] = name;
        obj['symbol'] = symbol;
        obj['minter_pub'] = minterPub;
        obj['entropy'] = entropy;
    }

    /**
     * Constructs a <code>ExecuteMessagePostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecuteMessagePostRequest} obj Optional instance to populate.
     * @return {module:model/ExecuteMessagePostRequest} The populated <code>ExecuteMessagePostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecuteMessagePostRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'String');
            }
            if (data.hasOwnProperty('minter_pub')) {
                obj['minter_pub'] = ApiClient.convertToType(data['minter_pub'], 'String');
            }
            if (data.hasOwnProperty('entropy')) {
                obj['entropy'] = ApiClient.convertToType(data['entropy'], 'String');
            }
            if (data.hasOwnProperty('royalty_info')) {
                obj['royalty_info'] = RoyaltyInfo.constructFromObject(data['royalty_info']);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = InstantiateConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('post_init_callback')) {
                obj['post_init_callback'] = PostInstantiateCallback.constructFromObject(data['post_init_callback']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecuteMessagePostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecuteMessagePostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExecuteMessagePostRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // ensure the json data is a string
        if (data['admin'] && !(typeof data['admin'] === 'string' || data['admin'] instanceof String)) {
            throw new Error("Expected the field `admin` to be a primitive type in the JSON string but got " + data['admin']);
        }
        // ensure the json data is a string
        if (data['minter_pub'] && !(typeof data['minter_pub'] === 'string' || data['minter_pub'] instanceof String)) {
            throw new Error("Expected the field `minter_pub` to be a primitive type in the JSON string but got " + data['minter_pub']);
        }
        // ensure the json data is a string
        if (data['entropy'] && !(typeof data['entropy'] === 'string' || data['entropy'] instanceof String)) {
            throw new Error("Expected the field `entropy` to be a primitive type in the JSON string but got " + data['entropy']);
        }
        // validate the optional field `royalty_info`
        if (data['royalty_info']) { // data not null
          RoyaltyInfo.validateJSON(data['royalty_info']);
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          InstantiateConfig.validateJSON(data['config']);
        }
        // validate the optional field `post_init_callback`
        if (data['post_init_callback']) { // data not null
          PostInstantiateCallback.validateJSON(data['post_init_callback']);
        }

        return true;
    }


}

ExecuteMessagePostRequest.RequiredProperties = ["name", "symbol", "minter_pub", "entropy"];

/**
 * name of token contract
 * @member {String} name
 */
ExecuteMessagePostRequest.prototype['name'] = undefined;

/**
 * token contract symbol
 * @member {String} symbol
 */
ExecuteMessagePostRequest.prototype['symbol'] = undefined;

/**
 * optional admin address, env.message.sender if missing
 * @member {String} admin
 */
ExecuteMessagePostRequest.prototype['admin'] = undefined;

/**
 * minter elliptic public key. Used for key exchange minter<-->collection
 * @member {String} minter_pub
 */
ExecuteMessagePostRequest.prototype['minter_pub'] = undefined;

/**
 * entropy used for prng seed
 * @member {String} entropy
 */
ExecuteMessagePostRequest.prototype['entropy'] = undefined;

/**
 * @member {module:model/RoyaltyInfo} royalty_info
 */
ExecuteMessagePostRequest.prototype['royalty_info'] = undefined;

/**
 * @member {module:model/InstantiateConfig} config
 */
ExecuteMessagePostRequest.prototype['config'] = undefined;

/**
 * @member {module:model/PostInstantiateCallback} post_init_callback
 */
ExecuteMessagePostRequest.prototype['post_init_callback'] = undefined;






export default ExecuteMessagePostRequest;

