/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InstantiateConfig model module.
 * @module model/InstantiateConfig
 * @version 1.0.0
 */
class InstantiateConfig {
    /**
     * Constructs a new <code>InstantiateConfig</code>.
     * This type represents optional configuration values. All values are optional and have defaults which are more private by default, but can be overridden if necessary
     * @alias module:model/InstantiateConfig
     */
    constructor() { 
        
        InstantiateConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstantiateConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstantiateConfig} obj Optional instance to populate.
     * @return {module:model/InstantiateConfig} The populated <code>InstantiateConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstantiateConfig();

            if (data.hasOwnProperty('enable_burn')) {
                obj['enable_burn'] = ApiClient.convertToType(data['enable_burn'], 'Boolean');
            }
            if (data.hasOwnProperty('enable_sealed_metadata')) {
                obj['enable_sealed_metadata'] = ApiClient.convertToType(data['enable_sealed_metadata'], 'Boolean');
            }
            if (data.hasOwnProperty('minter_may_update_metadata')) {
                obj['minter_may_update_metadata'] = ApiClient.convertToType(data['minter_may_update_metadata'], 'Boolean');
            }
            if (data.hasOwnProperty('owner_may_update_metadata')) {
                obj['owner_may_update_metadata'] = ApiClient.convertToType(data['owner_may_update_metadata'], 'Boolean');
            }
            if (data.hasOwnProperty('public_owner')) {
                obj['public_owner'] = ApiClient.convertToType(data['public_owner'], 'Boolean');
            }
            if (data.hasOwnProperty('public_token_supply')) {
                obj['public_token_supply'] = ApiClient.convertToType(data['public_token_supply'], 'Boolean');
            }
            if (data.hasOwnProperty('unwrapped_metadata_is_private')) {
                obj['unwrapped_metadata_is_private'] = ApiClient.convertToType(data['unwrapped_metadata_is_private'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstantiateConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstantiateConfig</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Indicates whether burn functionality should be enabled default: False
 * @member {Boolean} enable_burn
 */
InstantiateConfig.prototype['enable_burn'] = undefined;

/**
 * indicates whether sealed metadata should be enabled.  If sealed metadata is enabled, the private metadata is not viewable by anyone, not even the owner, until the owner calls the Reveal function.  When Reveal is called, the sealed metadata is irreversibly moved to the public metadata (as default).  if unwrapped_metadata_is_private is set to true, it will remain as private metadata, but the owner will now be able to see it.  Anyone will be able to query the token to know that it has been unwrapped.  This simulates buying/selling a wrapped card that no one knows which card it is until it is unwrapped. If sealed metadata is not enabled, all tokens are considered unwrapped default:  False
 * @member {Boolean} enable_sealed_metadata
 */
InstantiateConfig.prototype['enable_sealed_metadata'] = undefined;

/**
 * indicates whether a minter is permitted to update a token's metadata default: True
 * @member {Boolean} minter_may_update_metadata
 */
InstantiateConfig.prototype['minter_may_update_metadata'] = undefined;

/**
 * indicates whether the owner of a token is permitted to update a token's metadata default: False
 * @member {Boolean} owner_may_update_metadata
 */
InstantiateConfig.prototype['owner_may_update_metadata'] = undefined;

/**
 * indicates whether token ownership is public or private.  A user can still change whether the ownership of their tokens is public or private default: False
 * @member {Boolean} public_owner
 */
InstantiateConfig.prototype['public_owner'] = undefined;

/**
 * indicates whether the token IDs and the number of tokens controlled by the contract are public.  If the token supply is private, only minters can view the token IDs and number of tokens controlled by the contract default: False
 * @member {Boolean} public_token_supply
 */
InstantiateConfig.prototype['public_token_supply'] = undefined;

/**
 * indicates if the Reveal function should keep the sealed metadata private after unwrapping This config value is ignored if sealed metadata is not enabled default: False
 * @member {Boolean} unwrapped_metadata_is_private
 */
InstantiateConfig.prototype['unwrapped_metadata_is_private'] = undefined;






export default InstantiateConfig;

