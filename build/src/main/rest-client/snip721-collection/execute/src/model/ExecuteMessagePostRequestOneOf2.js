/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExecuteMessagePostRequestOneOf2MintNftClones from './ExecuteMessagePostRequestOneOf2MintNftClones';

/**
 * The ExecuteMessagePostRequestOneOf2 model module.
 * @module model/ExecuteMessagePostRequestOneOf2
 * @version 1.0.0
 */
class ExecuteMessagePostRequestOneOf2 {
    /**
     * Constructs a new <code>ExecuteMessagePostRequestOneOf2</code>.
     * create a mint run of clones that will have MintRunInfos showing they are serialized copies in the same mint run with the specified quantity.  Mint_run_id can be used to track mint run numbers in subsequent MintNftClones calls.  So, if provided, the first MintNftClones call will have mint run number 1, the next time MintNftClones is called with the same mint_run_id, those clones will have mint run number 2, etc...  If no mint_run_id is specified, the clones will not have any mint run number assigned to their MintRunInfos.  Because this mints to a single address, there is no option to specify that the clones are non-transferable as there is no foreseen reason for someone to have multiple copies of an nft that they can never send to others
     * @alias module:model/ExecuteMessagePostRequestOneOf2
     * @param mintNftClones {module:model/ExecuteMessagePostRequestOneOf2MintNftClones} 
     */
    constructor(mintNftClones) { 
        
        ExecuteMessagePostRequestOneOf2.initialize(this, mintNftClones);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mintNftClones) { 
        obj['mint_nft_clones'] = mintNftClones;
    }

    /**
     * Constructs a <code>ExecuteMessagePostRequestOneOf2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecuteMessagePostRequestOneOf2} obj Optional instance to populate.
     * @return {module:model/ExecuteMessagePostRequestOneOf2} The populated <code>ExecuteMessagePostRequestOneOf2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecuteMessagePostRequestOneOf2();

            if (data.hasOwnProperty('mint_nft_clones')) {
                obj['mint_nft_clones'] = ExecuteMessagePostRequestOneOf2MintNftClones.constructFromObject(data['mint_nft_clones']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecuteMessagePostRequestOneOf2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecuteMessagePostRequestOneOf2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExecuteMessagePostRequestOneOf2.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `mint_nft_clones`
        if (data['mint_nft_clones']) { // data not null
          ExecuteMessagePostRequestOneOf2MintNftClones.validateJSON(data['mint_nft_clones']);
        }

        return true;
    }


}

ExecuteMessagePostRequestOneOf2.RequiredProperties = ["mint_nft_clones"];

/**
 * @member {module:model/ExecuteMessagePostRequestOneOf2MintNftClones} mint_nft_clones
 */
ExecuteMessagePostRequestOneOf2.prototype['mint_nft_clones'] = undefined;






export default ExecuteMessagePostRequestOneOf2;

