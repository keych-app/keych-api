/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaFile from './MediaFile';
import Trait from './Trait';

/**
 * The Extension model module.
 * @module model/Extension
 * @version 1.0.0
 */
class Extension {
    /**
     * Constructs a new <code>Extension</code>.
     * metadata extension You can add any metadata fields you need here.  These fields are based on https://docs.opensea.io/docs/metadata-standards and are the metadata fields that Stashh uses for robust NFT display.  Urls should be prefixed with &#x60;http://&#x60;, &#x60;https://&#x60;, &#x60;ipfs://&#x60;, or &#x60;ar://&#x60;
     * @alias module:model/Extension
     */
    constructor() { 
        
        Extension.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Extension</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Extension} obj Optional instance to populate.
     * @return {module:model/Extension} The populated <code>Extension</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Extension();

            if (data.hasOwnProperty('animation_url')) {
                obj['animation_url'] = ApiClient.convertToType(data['animation_url'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [Trait]);
            }
            if (data.hasOwnProperty('background_color')) {
                obj['background_color'] = ApiClient.convertToType(data['background_color'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('external_url')) {
                obj['external_url'] = ApiClient.convertToType(data['external_url'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('image_data')) {
                obj['image_data'] = ApiClient.convertToType(data['image_data'], 'String');
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], [MediaFile]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('protected_attributes')) {
                obj['protected_attributes'] = ApiClient.convertToType(data['protected_attributes'], ['String']);
            }
            if (data.hasOwnProperty('token_subtype')) {
                obj['token_subtype'] = ApiClient.convertToType(data['token_subtype'], 'String');
            }
            if (data.hasOwnProperty('youtube_url')) {
                obj['youtube_url'] = ApiClient.convertToType(data['youtube_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Extension</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Extension</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['animation_url'] && !(typeof data['animation_url'] === 'string' || data['animation_url'] instanceof String)) {
            throw new Error("Expected the field `animation_url` to be a primitive type in the JSON string but got " + data['animation_url']);
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                Trait.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['background_color'] && !(typeof data['background_color'] === 'string' || data['background_color'] instanceof String)) {
            throw new Error("Expected the field `background_color` to be a primitive type in the JSON string but got " + data['background_color']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['external_url'] && !(typeof data['external_url'] === 'string' || data['external_url'] instanceof String)) {
            throw new Error("Expected the field `external_url` to be a primitive type in the JSON string but got " + data['external_url']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['image_data'] && !(typeof data['image_data'] === 'string' || data['image_data'] instanceof String)) {
            throw new Error("Expected the field `image_data` to be a primitive type in the JSON string but got " + data['image_data']);
        }
        if (data['media']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['media'])) {
                throw new Error("Expected the field `media` to be an array in the JSON data but got " + data['media']);
            }
            // validate the optional field `media` (array)
            for (const item of data['media']) {
                MediaFile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['protected_attributes'])) {
            throw new Error("Expected the field `protected_attributes` to be an array in the JSON data but got " + data['protected_attributes']);
        }
        // ensure the json data is a string
        if (data['token_subtype'] && !(typeof data['token_subtype'] === 'string' || data['token_subtype'] instanceof String)) {
            throw new Error("Expected the field `token_subtype` to be a primitive type in the JSON string but got " + data['token_subtype']);
        }
        // ensure the json data is a string
        if (data['youtube_url'] && !(typeof data['youtube_url'] === 'string' || data['youtube_url'] instanceof String)) {
            throw new Error("Expected the field `youtube_url` to be a primitive type in the JSON string but got " + data['youtube_url']);
        }

        return true;
    }


}



/**
 * url to a multimedia attachment
 * @member {String} animation_url
 */
Extension.prototype['animation_url'] = undefined;

/**
 * item attributes
 * @member {Array.<module:model/Trait>} attributes
 */
Extension.prototype['attributes'] = undefined;

/**
 * background color represented as a six-character hexadecimal without a pre-pended #
 * @member {String} background_color
 */
Extension.prototype['background_color'] = undefined;

/**
 * item description
 * @member {String} description
 */
Extension.prototype['description'] = undefined;

/**
 * url to allow users to view the item on your site
 * @member {String} external_url
 */
Extension.prototype['external_url'] = undefined;

/**
 * url to the image
 * @member {String} image
 */
Extension.prototype['image'] = undefined;

/**
 * raw SVG image data (not recommended). Only use this if you're not including the image parameter
 * @member {String} image_data
 */
Extension.prototype['image_data'] = undefined;

/**
 * media files as specified on Stashh that allows for basic authenticatiion and decryption keys. Most of the above is used for bridging public eth NFT metadata easily, whereas `media` will be used when minting NFTs on Stashh
 * @member {Array.<module:model/MediaFile>} media
 */
Extension.prototype['media'] = undefined;

/**
 * name of the item
 * @member {String} name
 */
Extension.prototype['name'] = undefined;

/**
 * a select list of trait_types that are in the private metadata.  This will only ever be used in public metadata
 * @member {Array.<String>} protected_attributes
 */
Extension.prototype['protected_attributes'] = undefined;

/**
 * token subtypes used by Stashh for display groupings (primarily used for badges, which are specified by using \"badge\" as the token_subtype)
 * @member {String} token_subtype
 */
Extension.prototype['token_subtype'] = undefined;

/**
 * url to a YouTube video
 * @member {String} youtube_url
 */
Extension.prototype['youtube_url'] = undefined;






export default Extension;

