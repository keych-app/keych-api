/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metadata from './Metadata';
import RoyaltyInfo from './RoyaltyInfo';
import SerialNumber from './SerialNumber';

/**
 * The ExecuteMessagePostRequestOneOfMintNft model module.
 * @module model/ExecuteMessagePostRequestOneOfMintNft
 * @version 1.0.0
 */
class ExecuteMessagePostRequestOneOfMintNft {
    /**
     * Constructs a new <code>ExecuteMessagePostRequestOneOfMintNft</code>.
     * @alias module:model/ExecuteMessagePostRequestOneOfMintNft
     */
    constructor() { 
        
        ExecuteMessagePostRequestOneOfMintNft.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExecuteMessagePostRequestOneOfMintNft</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecuteMessagePostRequestOneOfMintNft} obj Optional instance to populate.
     * @return {module:model/ExecuteMessagePostRequestOneOfMintNft} The populated <code>ExecuteMessagePostRequestOneOfMintNft</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecuteMessagePostRequestOneOfMintNft();

            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('padding')) {
                obj['padding'] = ApiClient.convertToType(data['padding'], 'String');
            }
            if (data.hasOwnProperty('private_metadata')) {
                obj['private_metadata'] = Metadata.constructFromObject(data['private_metadata']);
            }
            if (data.hasOwnProperty('public_metadata')) {
                obj['public_metadata'] = Metadata.constructFromObject(data['public_metadata']);
            }
            if (data.hasOwnProperty('royalty_info')) {
                obj['royalty_info'] = RoyaltyInfo.constructFromObject(data['royalty_info']);
            }
            if (data.hasOwnProperty('serial_number')) {
                obj['serial_number'] = SerialNumber.constructFromObject(data['serial_number']);
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('transferable')) {
                obj['transferable'] = ApiClient.convertToType(data['transferable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecuteMessagePostRequestOneOfMintNft</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecuteMessagePostRequestOneOfMintNft</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['padding'] && !(typeof data['padding'] === 'string' || data['padding'] instanceof String)) {
            throw new Error("Expected the field `padding` to be a primitive type in the JSON string but got " + data['padding']);
        }
        // validate the optional field `private_metadata`
        if (data['private_metadata']) { // data not null
          Metadata.validateJSON(data['private_metadata']);
        }
        // validate the optional field `public_metadata`
        if (data['public_metadata']) { // data not null
          Metadata.validateJSON(data['public_metadata']);
        }
        // validate the optional field `royalty_info`
        if (data['royalty_info']) { // data not null
          RoyaltyInfo.validateJSON(data['royalty_info']);
        }
        // validate the optional field `serial_number`
        if (data['serial_number']) { // data not null
          SerialNumber.validateJSON(data['serial_number']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }

        return true;
    }


}



/**
 * optional memo for the tx
 * @member {String} memo
 */
ExecuteMessagePostRequestOneOfMintNft.prototype['memo'] = undefined;

/**
 * optional owner address. if omitted, owned by the message sender
 * @member {String} owner
 */
ExecuteMessagePostRequestOneOfMintNft.prototype['owner'] = undefined;

/**
 * optional message length padding
 * @member {String} padding
 */
ExecuteMessagePostRequestOneOfMintNft.prototype['padding'] = undefined;

/**
 * @member {module:model/Metadata} private_metadata
 */
ExecuteMessagePostRequestOneOfMintNft.prototype['private_metadata'] = undefined;

/**
 * @member {module:model/Metadata} public_metadata
 */
ExecuteMessagePostRequestOneOfMintNft.prototype['public_metadata'] = undefined;

/**
 * @member {module:model/RoyaltyInfo} royalty_info
 */
ExecuteMessagePostRequestOneOfMintNft.prototype['royalty_info'] = undefined;

/**
 * @member {module:model/SerialNumber} serial_number
 */
ExecuteMessagePostRequestOneOfMintNft.prototype['serial_number'] = undefined;

/**
 * optional token id. if omitted, use current token index
 * @member {String} token_id
 */
ExecuteMessagePostRequestOneOfMintNft.prototype['token_id'] = undefined;

/**
 * optionally true if the token is transferable.  Defaults to true if omitted
 * @member {Boolean} transferable
 */
ExecuteMessagePostRequestOneOfMintNft.prototype['transferable'] = undefined;






export default ExecuteMessagePostRequestOneOfMintNft;

