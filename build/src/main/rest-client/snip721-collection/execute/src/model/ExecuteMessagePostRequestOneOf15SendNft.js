/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReceiverInfo from './ReceiverInfo';

/**
 * The ExecuteMessagePostRequestOneOf15SendNft model module.
 * @module model/ExecuteMessagePostRequestOneOf15SendNft
 * @version 1.0.0
 */
class ExecuteMessagePostRequestOneOf15SendNft {
    /**
     * Constructs a new <code>ExecuteMessagePostRequestOneOf15SendNft</code>.
     * @alias module:model/ExecuteMessagePostRequestOneOf15SendNft
     * @param contract {String} address to send the token to
     * @param tokenId {String} id of the token to send
     */
    constructor(contract, tokenId) { 
        
        ExecuteMessagePostRequestOneOf15SendNft.initialize(this, contract, tokenId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contract, tokenId) { 
        obj['contract'] = contract;
        obj['token_id'] = tokenId;
    }

    /**
     * Constructs a <code>ExecuteMessagePostRequestOneOf15SendNft</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecuteMessagePostRequestOneOf15SendNft} obj Optional instance to populate.
     * @return {module:model/ExecuteMessagePostRequestOneOf15SendNft} The populated <code>ExecuteMessagePostRequestOneOf15SendNft</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecuteMessagePostRequestOneOf15SendNft();

            if (data.hasOwnProperty('contract')) {
                obj['contract'] = ApiClient.convertToType(data['contract'], 'String');
            }
            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('msg')) {
                obj['msg'] = ApiClient.convertToType(data['msg'], 'String');
            }
            if (data.hasOwnProperty('padding')) {
                obj['padding'] = ApiClient.convertToType(data['padding'], 'String');
            }
            if (data.hasOwnProperty('receiver_info')) {
                obj['receiver_info'] = ReceiverInfo.constructFromObject(data['receiver_info']);
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecuteMessagePostRequestOneOf15SendNft</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecuteMessagePostRequestOneOf15SendNft</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExecuteMessagePostRequestOneOf15SendNft.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contract'] && !(typeof data['contract'] === 'string' || data['contract'] instanceof String)) {
            throw new Error("Expected the field `contract` to be a primitive type in the JSON string but got " + data['contract']);
        }
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }
        // ensure the json data is a string
        if (data['msg'] && !(typeof data['msg'] === 'string' || data['msg'] instanceof String)) {
            throw new Error("Expected the field `msg` to be a primitive type in the JSON string but got " + data['msg']);
        }
        // ensure the json data is a string
        if (data['padding'] && !(typeof data['padding'] === 'string' || data['padding'] instanceof String)) {
            throw new Error("Expected the field `padding` to be a primitive type in the JSON string but got " + data['padding']);
        }
        // validate the optional field `receiver_info`
        if (data['receiver_info']) { // data not null
          ReceiverInfo.validateJSON(data['receiver_info']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }

        return true;
    }


}

ExecuteMessagePostRequestOneOf15SendNft.RequiredProperties = ["contract", "token_id"];

/**
 * address to send the token to
 * @member {String} contract
 */
ExecuteMessagePostRequestOneOf15SendNft.prototype['contract'] = undefined;

/**
 * optional memo for the tx
 * @member {String} memo
 */
ExecuteMessagePostRequestOneOf15SendNft.prototype['memo'] = undefined;

/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.  This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
 * @member {String} msg
 */
ExecuteMessagePostRequestOneOf15SendNft.prototype['msg'] = undefined;

/**
 * optional message length padding
 * @member {String} padding
 */
ExecuteMessagePostRequestOneOf15SendNft.prototype['padding'] = undefined;

/**
 * @member {module:model/ReceiverInfo} receiver_info
 */
ExecuteMessagePostRequestOneOf15SendNft.prototype['receiver_info'] = undefined;

/**
 * id of the token to send
 * @member {String} token_id
 */
ExecuteMessagePostRequestOneOf15SendNft.prototype['token_id'] = undefined;






export default ExecuteMessagePostRequestOneOf15SendNft;

