/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SerialNumber model module.
 * @module model/SerialNumber
 * @version 1.0.0
 */
class SerialNumber {
    /**
     * Constructs a new <code>SerialNumber</code>.
     * Serial number to give an NFT when minting
     * @alias module:model/SerialNumber
     * @param serialNumber {Number} serial number (in this mint run).  This is used to serialize identical NFTs
     */
    constructor(serialNumber) { 
        
        SerialNumber.initialize(this, serialNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serialNumber) { 
        obj['serial_number'] = serialNumber;
    }

    /**
     * Constructs a <code>SerialNumber</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SerialNumber} obj Optional instance to populate.
     * @return {module:model/SerialNumber} The populated <code>SerialNumber</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SerialNumber();

            if (data.hasOwnProperty('mint_run')) {
                obj['mint_run'] = ApiClient.convertToType(data['mint_run'], 'Number');
            }
            if (data.hasOwnProperty('quantity_minted_this_run')) {
                obj['quantity_minted_this_run'] = ApiClient.convertToType(data['quantity_minted_this_run'], 'Number');
            }
            if (data.hasOwnProperty('serial_number')) {
                obj['serial_number'] = ApiClient.convertToType(data['serial_number'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SerialNumber</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SerialNumber</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SerialNumber.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

SerialNumber.RequiredProperties = ["serial_number"];

/**
 * optional number of the mint run this token will be minted in.  A mint run represents a batch of NFTs released at the same time.  So if a creator decided to make 100 copies of an NFT, they would all be part of mint run number 1.  If they sold quickly, and the creator wanted to rerelease that NFT, he could make 100 more copies which would all be part of mint run number 2.
 * @member {Number} mint_run
 */
SerialNumber.prototype['mint_run'] = undefined;

/**
 * optional total number of NFTs minted on this run.  This is used to represent that this token is number m of n
 * @member {Number} quantity_minted_this_run
 */
SerialNumber.prototype['quantity_minted_this_run'] = undefined;

/**
 * serial number (in this mint run).  This is used to serialize identical NFTs
 * @member {Number} serial_number
 */
SerialNumber.prototype['serial_number'] = undefined;






export default SerialNumber;

