/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KeychApi);
  }
}(this, function(expect, KeychApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KeychApi.ExecuteMessagePostRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExecuteMessagePostRequest', function() {
    it('should create an instance of ExecuteMessagePostRequest', function() {
      // uncomment below and update the code to test ExecuteMessagePostRequest
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be.a(KeychApi.ExecuteMessagePostRequest);
    });

    it('should have the property mintNft (base name: "mint_nft")', function() {
      // uncomment below and update the code to test the property mintNft
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property batchMintNft (base name: "batch_mint_nft")', function() {
      // uncomment below and update the code to test the property batchMintNft
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property mintNftClones (base name: "mint_nft_clones")', function() {
      // uncomment below and update the code to test the property mintNftClones
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property setMetadata (base name: "set_metadata")', function() {
      // uncomment below and update the code to test the property setMetadata
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property setRoyaltyInfo (base name: "set_royalty_info")', function() {
      // uncomment below and update the code to test the property setRoyaltyInfo
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property reveal (base name: "reveal")', function() {
      // uncomment below and update the code to test the property reveal
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property makeOwnershipPrivate (base name: "make_ownership_private")', function() {
      // uncomment below and update the code to test the property makeOwnershipPrivate
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property setGlobalApproval (base name: "set_global_approval")', function() {
      // uncomment below and update the code to test the property setGlobalApproval
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property setWhitelistedApproval (base name: "set_whitelisted_approval")', function() {
      // uncomment below and update the code to test the property setWhitelistedApproval
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property approve (base name: "approve")', function() {
      // uncomment below and update the code to test the property approve
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property revoke (base name: "revoke")', function() {
      // uncomment below and update the code to test the property revoke
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property approveAll (base name: "approve_all")', function() {
      // uncomment below and update the code to test the property approveAll
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property revokeAll (base name: "revoke_all")', function() {
      // uncomment below and update the code to test the property revokeAll
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property transferNft (base name: "transfer_nft")', function() {
      // uncomment below and update the code to test the property transferNft
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property batchTransferNft (base name: "batch_transfer_nft")', function() {
      // uncomment below and update the code to test the property batchTransferNft
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property sendNft (base name: "send_nft")', function() {
      // uncomment below and update the code to test the property sendNft
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property batchSendNft (base name: "batch_send_nft")', function() {
      // uncomment below and update the code to test the property batchSendNft
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property burnNft (base name: "burn_nft")', function() {
      // uncomment below and update the code to test the property burnNft
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property batchBurnNft (base name: "batch_burn_nft")', function() {
      // uncomment below and update the code to test the property batchBurnNft
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property registerReceiveNft (base name: "register_receive_nft")', function() {
      // uncomment below and update the code to test the property registerReceiveNft
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property createViewingKey (base name: "create_viewing_key")', function() {
      // uncomment below and update the code to test the property createViewingKey
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property setViewingKey (base name: "set_viewing_key")', function() {
      // uncomment below and update the code to test the property setViewingKey
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property addMinters (base name: "add_minters")', function() {
      // uncomment below and update the code to test the property addMinters
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property removeMinters (base name: "remove_minters")', function() {
      // uncomment below and update the code to test the property removeMinters
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property setMinters (base name: "set_minters")', function() {
      // uncomment below and update the code to test the property setMinters
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property changeAdmin (base name: "change_admin")', function() {
      // uncomment below and update the code to test the property changeAdmin
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property setContractStatus (base name: "set_contract_status")', function() {
      // uncomment below and update the code to test the property setContractStatus
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

    it('should have the property revokePermit (base name: "revoke_permit")', function() {
      // uncomment below and update the code to test the property revokePermit
      //var instance = new KeychApi.ExecuteMessagePostRequest();
      //expect(instance).to.be();
    });

  });

}));
