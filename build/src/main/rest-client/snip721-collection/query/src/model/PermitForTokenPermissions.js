/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PermitParamsForTokenPermissions from './PermitParamsForTokenPermissions';
import PermitSignature from './PermitSignature';

/**
 * The PermitForTokenPermissions model module.
 * @module model/PermitForTokenPermissions
 * @version 1.0.0
 */
class PermitForTokenPermissions {
    /**
     * Constructs a new <code>PermitForTokenPermissions</code>.
     * @alias module:model/PermitForTokenPermissions
     * @param params {module:model/PermitParamsForTokenPermissions} 
     * @param signature {module:model/PermitSignature} 
     */
    constructor(params, signature) { 
        
        PermitForTokenPermissions.initialize(this, params, signature);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, params, signature) { 
        obj['params'] = params;
        obj['signature'] = signature;
    }

    /**
     * Constructs a <code>PermitForTokenPermissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PermitForTokenPermissions} obj Optional instance to populate.
     * @return {module:model/PermitForTokenPermissions} The populated <code>PermitForTokenPermissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PermitForTokenPermissions();

            if (data.hasOwnProperty('params')) {
                obj['params'] = PermitParamsForTokenPermissions.constructFromObject(data['params']);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = PermitSignature.constructFromObject(data['signature']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PermitForTokenPermissions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PermitForTokenPermissions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PermitForTokenPermissions.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `params`
        if (data['params']) { // data not null
          PermitParamsForTokenPermissions.validateJSON(data['params']);
        }
        // validate the optional field `signature`
        if (data['signature']) { // data not null
          PermitSignature.validateJSON(data['signature']);
        }

        return true;
    }


}

PermitForTokenPermissions.RequiredProperties = ["params", "signature"];

/**
 * @member {module:model/PermitParamsForTokenPermissions} params
 */
PermitForTokenPermissions.prototype['params'] = undefined;

/**
 * @member {module:model/PermitSignature} signature
 */
PermitForTokenPermissions.prototype['signature'] = undefined;






export default PermitForTokenPermissions;

