/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PubKey from './PubKey';

/**
 * The PermitSignature model module.
 * @module model/PermitSignature
 * @version 1.0.0
 */
class PermitSignature {
    /**
     * Constructs a new <code>PermitSignature</code>.
     * @alias module:model/PermitSignature
     * @param pubKey {module:model/PubKey} 
     * @param signature {String} Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.  This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
     */
    constructor(pubKey, signature) { 
        
        PermitSignature.initialize(this, pubKey, signature);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pubKey, signature) { 
        obj['pub_key'] = pubKey;
        obj['signature'] = signature;
    }

    /**
     * Constructs a <code>PermitSignature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PermitSignature} obj Optional instance to populate.
     * @return {module:model/PermitSignature} The populated <code>PermitSignature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PermitSignature();

            if (data.hasOwnProperty('pub_key')) {
                obj['pub_key'] = PubKey.constructFromObject(data['pub_key']);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PermitSignature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PermitSignature</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PermitSignature.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `pub_key`
        if (data['pub_key']) { // data not null
          PubKey.validateJSON(data['pub_key']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}

PermitSignature.RequiredProperties = ["pub_key", "signature"];

/**
 * @member {module:model/PubKey} pub_key
 */
PermitSignature.prototype['pub_key'] = undefined;

/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.  This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 * @member {String} signature
 */
PermitSignature.prototype['signature'] = undefined;






export default PermitSignature;

