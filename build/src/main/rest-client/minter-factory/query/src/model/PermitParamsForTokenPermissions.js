/**
 * Keych API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokenPermissions from './TokenPermissions';

/**
 * The PermitParamsForTokenPermissions model module.
 * @module model/PermitParamsForTokenPermissions
 * @version 1.0.0
 */
class PermitParamsForTokenPermissions {
    /**
     * Constructs a new <code>PermitParamsForTokenPermissions</code>.
     * @alias module:model/PermitParamsForTokenPermissions
     * @param allowedTokens {Array.<String>} 
     * @param chainId {String} 
     * @param permissions {Array.<module:model/TokenPermissions>} 
     * @param permitName {String} 
     */
    constructor(allowedTokens, chainId, permissions, permitName) { 
        
        PermitParamsForTokenPermissions.initialize(this, allowedTokens, chainId, permissions, permitName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowedTokens, chainId, permissions, permitName) { 
        obj['allowed_tokens'] = allowedTokens;
        obj['chain_id'] = chainId;
        obj['permissions'] = permissions;
        obj['permit_name'] = permitName;
    }

    /**
     * Constructs a <code>PermitParamsForTokenPermissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PermitParamsForTokenPermissions} obj Optional instance to populate.
     * @return {module:model/PermitParamsForTokenPermissions} The populated <code>PermitParamsForTokenPermissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PermitParamsForTokenPermissions();

            if (data.hasOwnProperty('allowed_tokens')) {
                obj['allowed_tokens'] = ApiClient.convertToType(data['allowed_tokens'], ['String']);
            }
            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], [TokenPermissions]);
            }
            if (data.hasOwnProperty('permit_name')) {
                obj['permit_name'] = ApiClient.convertToType(data['permit_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PermitParamsForTokenPermissions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PermitParamsForTokenPermissions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PermitParamsForTokenPermissions.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_tokens'])) {
            throw new Error("Expected the field `allowed_tokens` to be an array in the JSON data but got " + data['allowed_tokens']);
        }
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        if (data['permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permissions'])) {
                throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
            }
            // validate the optional field `permissions` (array)
            for (const item of data['permissions']) {
                TokenPermissions.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['permit_name'] && !(typeof data['permit_name'] === 'string' || data['permit_name'] instanceof String)) {
            throw new Error("Expected the field `permit_name` to be a primitive type in the JSON string but got " + data['permit_name']);
        }

        return true;
    }


}

PermitParamsForTokenPermissions.RequiredProperties = ["allowed_tokens", "chain_id", "permissions", "permit_name"];

/**
 * @member {Array.<String>} allowed_tokens
 */
PermitParamsForTokenPermissions.prototype['allowed_tokens'] = undefined;

/**
 * @member {String} chain_id
 */
PermitParamsForTokenPermissions.prototype['chain_id'] = undefined;

/**
 * @member {Array.<module:model/TokenPermissions>} permissions
 */
PermitParamsForTokenPermissions.prototype['permissions'] = undefined;

/**
 * @member {String} permit_name
 */
PermitParamsForTokenPermissions.prototype['permit_name'] = undefined;






export default PermitParamsForTokenPermissions;

